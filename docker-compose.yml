services:
  backend_upload:
    build:
      context: ./backend_upload
      dockerfile: Dockerfile
    container_name: backend_upload
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "8001:8001"
    environment:
      MINIO_ENDPOINT: host.docker.internal:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    networks:
      - app-network
    volumes:
      - ./backend_upload:/app

  backend_process:
    build:
      context: ./backend_process
      dockerfile: Dockerfile
    container_name: backend_process
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "8005:8001"
    environment:
      MONGODB_URL: mongodb://admin:password@mongodb:27017
      MINIO_ENDPOINT: host.docker.internal:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      EXTERNAL_API_URL: ${EXTERNAL_API_URL:-https://external-api.example.com/data}
      EXTERNAL_API_KEY: ${EXTERNAL_API_KEY:-your-api-key-here}
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - app-network
    volumes:
      - ./backend_process:/app

  backend_type:
    build:
      context: ./backend_type
      dockerfile: Dockerfile
    container_name: backend_type
    ports:
      - "8003:8001"
    networks:
      - app-network
    volumes:
      - ./backend_type:/app

  # MongoDB
  mongodb:
    image: mongo:7.0
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongodb_test_data:/docker-entrypoint-initdb.d/data:ro
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL for Kong
  kong-database:
    image: postgres:16-alpine
    container_name: kong_database
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kongpass
    ports:
      - "5432:5432"
    volumes:
      - kong_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kong Database Migration
  kong-migration:
    image: kong/kong-gateway:3.5
    container_name: kong_migration
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kongpass
    depends_on:
      kong-database:
        condition: service_healthy
    networks:
      - app-network
    restart: on-failure

  # Kong API Gateway
  kong:
    image: kong/kong-gateway:3.5
    container_name: kong_gateway
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kongpass
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8444 ssl, 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
    ports:
      - "8000:8000"    # HTTP Proxy
      - "8443:8443"    # HTTPS Proxy
      - "8002:8002"    # Kong Manager (GUI)
      - "8444:8444"    # Admin API HTTPS
    depends_on:
      kong-database:
        condition: service_healthy
      kong-migration:
        condition: service_completed_successfully
      backend_process:
        condition: service_started
      backend_upload:
        condition: service_started
      backend_type:
        condition: service_started
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kong Configuration (Declarative)
  kong-config:
    image: kong/deck:latest
    container_name: kong_config
    command: gateway sync /etc/kong/kong.yaml --kong-addr http://kong:8001 --timeout 120
    volumes:
      - ./kong/kong.yaml:/etc/kong/kong.yaml
    depends_on:
      kong:
        condition: service_healthy
    networks:
      - app-network
    restart: on-failure

  # Frontend (Nginx serving static files)
  frontend:
    image: nginx:alpine
    container_name: frontend
    ports:
      - "3000:80"
    volumes:
      - ./frontend:/usr/share/nginx/html:ro
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - kong
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  kong_data:
  mongodb_data:
