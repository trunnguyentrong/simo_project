---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
  namespace: test-kong
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: frontend-config
          mountPath: /etc/nginx/conf.d
        - name: frontend-content
          mountPath: /usr/share/nginx/html
      volumes:
      - name: frontend-config
        configMap:
          name: frontend-nginx-config
      - name: frontend-content
        configMap:
          name: frontend-content

---
# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: test-kong
  labels:
    app: frontend-service
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    nodePort: 30080  # You can access frontend at http://<node-ip>:30080
  selector:
    app: frontend

---
# Nginx Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-nginx-config
  namespace: test-kong
data:
  default.conf: |
    server {
        listen 80;
        server_name _;
        root /usr/share/nginx/html;
        index index.html;

        # Gzip compression
        gzip on;
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

        location / {
            try_files $uri $uri/ /index.html;
        }

        # API proxy to Kong
        location /api/ {
            proxy_pass http://kong-proxy.test-kong.svc.cluster.local:80/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Increase timeouts for file uploads
            proxy_connect_timeout 300s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
            client_max_body_size 50M;
        }

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
    }

---
# Frontend Content (HTML, CSS, JS)
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-content
  namespace: test-kong
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Data Processing Platform</title>
        <link rel="stylesheet" href="styles.css">
    </head>
    <body>
        <div class="container">
            <header>
                <h1>B√°o C√°o Ng√¢n H√†ng Nh√† N∆∞·ªõc - SIMO</h1>
                <p class="subtitle">Upload, Process, and Analyze Your Excel Data</p>
            </header>

            <!-- Progress Steps -->
            <div class="progress-steps">
                <div class="step active" id="step1">
                    <div class="step-number">1</div>
                    <div class="step-label">Upload File</div>
                </div>
                <div class="step-line"></div>
                <div class="step" id="step2">
                    <div class="step-number">2</div>
                    <div class="step-label">Select Type</div>
                </div>
                <div class="step-line"></div>
                <div class="step" id="step3">
                    <div class="step-number">3</div>
                    <div class="step-label">Process</div>
                </div>
            </div>

            <!-- Step 1: Upload Section -->
            <section class="card">
                <h2>üìÅ Step 1: Upload Your File</h2>
                <div class="upload-area" id="uploadArea">
                    <div class="upload-icon">üì§</div>
                    <p>Drag and drop your Excel file here</p>
                    <p class="upload-hint">or click to browse</p>
                    <input type="file" id="fileInput" accept=".xlsx,.xls" hidden>
                </div>
                
                <div class="file-info" id="fileInfo">
                    <span class="file-icon">üìÑ</span>
                    <span class="file-name" id="fileName"></span>
                </div>

                <button class="btn btn-primary" id="uploadBtn" disabled>
                    <span class="btn-text">Upload File</span>
                    <span class="loader" id="uploadLoader"></span>
                </button>
                
                <div class="processing-message" id="uploadProcessing">
                    ‚è≥ Uploading file...
                </div>
                
                <div class="status" id="uploadStatus"></div>
            </section>

            <!-- Step 2: Process Section -->
            <section class="card" id="processSection" style="display: none;">
                <h2>‚öôÔ∏è Step 2: Configure Processing</h2>
                <div class="form-group">
                    <label for="fileId">File ID:</label>
                    <input type="text" id="fileId" class="form-control" readonly>
                </div>

                <div class="form-group">
                    <label for="processingType">Processing Type:</label>
                    <select id="processingType" class="form-control">
                        <option value="">Select processing type...</option>
                        <option value="type5">Thu th·∫≠p th√¥ng tin s·ªë d∆∞ TKƒêBTT cho d·ªãch v·ª• V√≠ ƒëi·ªán t·ª≠ t·∫°i c√°c TGTT</option>
                        <option value="type6">Thu th·∫≠p th√¥ng tin s·ªë d∆∞ TKƒêBTT cho d·ªãch v·ª• V√≠ ƒëi·ªán t·ª≠ t·∫°i c√°c ng√¢n h√†ng h·ª£p t√°c</option>
                        <option value="type7">Thu th·∫≠p danh s√°ch TKTT c·ªßa t·ªï ch·ª©c ƒë·ªãnh k·ª≥ </option>
                    </select>
                    <p class="help-text" id="typeDescription">Select a processing type to see details</p>
                </div>

                <button class="btn btn-success" id="processBtn">
                    <span class="btn-text">Start Processing</span>
                    <span class="loader" id="processLoader"></span>
                </button>

                <div class="processing-message" id="processProcessing">
                    ‚è≥ Processing data...
                </div>

                <div class="status" id="processStatus"></div>
            </section>

            <!-- Step 3: Results Section -->
            <section class="card result-box" id="resultBox" style="display: none;">
                <h2>‚ú® Processing Results</h2>
            </section>
        </div>

        <footer>
            <p>üí° Keyboard Shortcuts: <kbd>Ctrl+U</kbd> Upload | <kbd>Ctrl+P</kbd> Process</p>
        </footer>

        <script src="app.js"></script>
    </body>
    </html>

  styles.css: |
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        padding: 20px;
    }

    .container {
        max-width: 800px;
        margin: 0 auto;
    }

    header {
        text-align: center;
        color: white;
        margin-bottom: 40px;
    }

    h1 {
        font-size: 2.5rem;
        margin-bottom: 10px;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.2);
    }

    .subtitle {
        font-size: 1.1rem;
        opacity: 0.9;
    }

    .progress-steps {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 40px;
        background: rgba(255,255,255,0.1);
        padding: 20px;
        border-radius: 15px;
        backdrop-filter: blur(10px);
    }

    .step {
        display: flex;
        flex-direction: column;
        align-items: center;
        color: rgba(255,255,255,0.6);
        transition: all 0.3s ease;
    }

    .step.active {
        color: white;
        transform: scale(1.1);
    }

    .step.completed {
        color: #86efac;
    }

    .step-number {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        background: rgba(255,255,255,0.2);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
        font-weight: bold;
        margin-bottom: 10px;
        transition: all 0.3s ease;
    }

    .step.active .step-number {
        background: white;
        color: #667eea;
        box-shadow: 0 4px 15px rgba(255,255,255,0.3);
    }

    .step.completed .step-number {
        background: #86efac;
        color: #064e3b;
    }

    .step-line {
        flex: 1;
        height: 3px;
        background: rgba(255,255,255,0.3);
        margin: 0 10px;
    }

    .card {
        background: white;
        border-radius: 15px;
        padding: 30px;
        margin-bottom: 20px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.2);
    }

    h2 {
        color: #1e293b;
        margin-bottom: 20px;
        font-size: 1.5rem;
    }

    .upload-area {
        border: 3px dashed #cbd5e1;
        border-radius: 10px;
        padding: 50px 20px;
        text-align: center;
        cursor: pointer;
        transition: all 0.3s ease;
        background: #f8fafc;
    }

    .upload-area:hover, .upload-area.dragover {
        border-color: #667eea;
        background: #ede9fe;
        transform: translateY(-2px);
    }

    .upload-icon {
        font-size: 4rem;
        margin-bottom: 15px;
    }

    .upload-hint {
        color: #64748b;
        font-size: 0.9rem;
        margin-top: 5px;
    }

    .file-info {
        display: none;
        align-items: center;
        gap: 10px;
        padding: 15px;
        background: #f1f5f9;
        border-radius: 8px;
        margin: 20px 0;
    }

    .file-info.show {
        display: flex;
    }

    .file-icon {
        font-size: 1.5rem;
    }

    .btn {
        width: 100%;
        padding: 15px;
        border: none;
        border-radius: 8px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        margin-top: 15px;
        position: relative;
    }

    .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }

    .btn-success {
        background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        color: white;
    }

    .btn:hover:not(:disabled) {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0,0,0,0.3);
    }

    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .loader {
        display: none;
        width: 20px;
        height: 20px;
        border: 3px solid rgba(255,255,255,0.3);
        border-top-color: white;
        border-radius: 50%;
        animation: spin 0.8s linear infinite;
        margin-left: 10px;
    }

    .loader.show {
        display: inline-block;
    }

    @keyframes spin {
        to { transform: rotate(360deg); }
    }

    .processing-message {
        display: none;
        text-align: center;
        padding: 15px;
        background: #fef3c7;
        color: #92400e;
        border-radius: 8px;
        margin-top: 15px;
        font-weight: 500;
    }

    .status {
        display: none;
        padding: 15px;
        border-radius: 8px;
        margin-top: 15px;
        white-space: pre-line;
    }

    .status.show {
        display: block;
    }

    .status.success {
        background: #d1fae5;
        color: #065f46;
        border-left: 4px solid #10b981;
    }

    .status.error {
        background: #fee2e2;
        color: #991b1b;
        border-left: 4px solid #ef4444;
    }

    .form-group {
        margin-bottom: 20px;
    }

    label {
        display: block;
        margin-bottom: 8px;
        color: #475569;
        font-weight: 600;
    }

    .form-control {
        width: 100%;
        padding: 12px;
        border: 2px solid #e2e8f0;
        border-radius: 8px;
        font-size: 1rem;
        transition: border-color 0.3s ease;
    }

    .form-control:focus {
        outline: none;
        border-color: #667eea;
    }

    .help-text {
        margin-top: 8px;
        font-size: 0.9rem;
        color: #64748b;
    }

    .result-box pre {
        background: #1e293b;
        color: #e2e8f0;
        padding: 20px;
        border-radius: 8px;
        overflow-x: auto;
        font-family: 'Courier New', monospace;
        font-size: 0.9rem;
        line-height: 1.6;
    }

    footer {
        text-align: center;
        color: white;
        margin-top: 40px;
        opacity: 0.8;
    }

    kbd {
        background: rgba(255,255,255,0.2);
        padding: 3px 8px;
        border-radius: 4px;
        font-family: monospace;
    }

  app.js: |
    // API Gateway URL - uses relative path to leverage nginx proxy
    const API_URL = '/api';

    // Elements
    const uploadArea = document.getElementById('uploadArea');
    const fileInput = document.getElementById('fileInput');
    const fileInfo = document.getElementById('fileInfo');
    const fileName = document.getElementById('fileName');
    const uploadBtn = document.getElementById('uploadBtn');
    const uploadLoader = document.getElementById('uploadLoader');
    const uploadProcessing = document.getElementById('uploadProcessing');
    const uploadStatus = document.getElementById('uploadStatus');
    const processSection = document.getElementById('processSection');
    const fileId = document.getElementById('fileId');
    const processBtn = document.getElementById('processBtn');
    const processLoader = document.getElementById('processLoader');
    const processProcessing = document.getElementById('processProcessing');
    const processStatus = document.getElementById('processStatus');
    const resultBox = document.getElementById('resultBox');
    const processingTypeSelect = document.getElementById('processingType');
    const typeDescription = document.getElementById('typeDescription');

    // Step indicators
    const step1 = document.getElementById('step1');
    const step2 = document.getElementById('step2');
    const step3 = document.getElementById('step3');

    let selectedFile = null;
    let currentFileId = null;
    let processingTypes = [];

    // Update step indicator
    function updateStep(stepNumber) {
        [step1, step2, step3].forEach((step, index) => {
            if (index + 1 < stepNumber) {
                step.classList.add('completed');
                step.classList.remove('active');
            } else if (index + 1 === stepNumber) {
                step.classList.add('active');
                step.classList.remove('completed');
            } else {
                step.classList.remove('active', 'completed');
            }
        });
    }

    // Upload area click
    uploadArea.addEventListener('click', () => {
        fileInput.click();
    });

    // File input change
    fileInput.addEventListener('change', (e) => {
        handleFile(e.target.files[0]);
    });

    // Drag and drop
    uploadArea.addEventListener('dragover', (e) => {
        e.preventDefault();
        uploadArea.classList.add('dragover');
    });

    uploadArea.addEventListener('dragleave', () => {
        uploadArea.classList.remove('dragover');
    });

    uploadArea.addEventListener('drop', (e) => {
        e.preventDefault();
        uploadArea.classList.remove('dragover');
        handleFile(e.dataTransfer.files[0]);
    });

    // Handle file selection
    function handleFile(file) {
        if (!file) return;

        const validTypes = [
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            'application/vnd.ms-excel'
        ];

        if (!validTypes.includes(file.type) && !file.name.match(/\.(xlsx|xls)$/i)) {
            showStatus(uploadStatus, 'error', '‚ùå Please select a valid Excel file (.xlsx or .xls)');
            return;
        }

        const maxSize = 50 * 1024 * 1024;
        if (file.size > maxSize) {
            showStatus(uploadStatus, 'error', '‚ùå File too large. Maximum size is 50MB');
            return;
        }

        selectedFile = file;
        const fileSizeMB = (file.size / (1024 * 1024)).toFixed(2);
        fileName.textContent = `${file.name} (${fileSizeMB} MB)`;
        fileInfo.classList.add('show');
        uploadBtn.disabled = false;
        uploadStatus.classList.remove('show');
    }

    // Upload button click
    uploadBtn.addEventListener('click', async () => {
        if (!selectedFile) return;

        uploadBtn.disabled = true;
        uploadLoader.classList.add('show');
        uploadProcessing.style.display = 'block';
        uploadStatus.classList.remove('show');
        processSection.style.display = 'none';

        try {
            const formData = new FormData();
            formData.append('file', selectedFile);

            const response = await fetch(`${API_URL}/upload`, {
                method: 'POST',
                body: formData
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.detail || response.statusText);
            }

            const data = await response.json();
            currentFileId = data.file_id;

            showStatus(uploadStatus, 'success', `‚úÖ File uploaded successfully! File ID: ${data.file_id.substring(0, 8)}...`);
            fileId.value = data.file_id;
            processSection.style.display = 'block';

            updateStep(2);

            setTimeout(() => {
                processSection.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
            }, 300);

        } catch (error) {
            showStatus(uploadStatus, 'error', `‚ùå Upload failed: ${error.message}`);
            uploadBtn.disabled = false;
        } finally {
            uploadLoader.classList.remove('show');
            uploadProcessing.style.display = 'none';
        }
    });

    // Load processing types
    async function loadProcessingTypes() {
        try {
            const response = await fetch(`${API_URL}/types`);
            if (response.ok) {
                const data = await response.json();
                processingTypes = data.processing_types || [];
                console.log('‚úÖ Processing types loaded:', processingTypes.length);
            }
        } catch (error) {
            console.error('‚ùå Failed to load processing types:', error);
        }
    }

    // Processing type change
    processingTypeSelect.addEventListener('change', (e) => {
        const selectedType = e.target.value;
        if (selectedType) {
            const typeInfo = processingTypes.find(t => t.type === selectedType);
            if (typeInfo && typeInfo.config) {
                const config = typeInfo.config;
                let description = `üìã Collections: ${config.collections ? config.collections.join(', ') : 'N/A'}`;
                if (config.description) {
                    description += ` | ${config.description}`;
                }
                typeDescription.textContent = description;
            } else {
                typeDescription.textContent = `Processing type: ${selectedType}`;
            }
            typeDescription.style.color = '#475569';
        } else {
            typeDescription.textContent = 'Select a processing type to see details';
            typeDescription.style.color = '#64748b';
        }
    });

    // Process button click
    processBtn.addEventListener('click', async () => {
        if (!currentFileId) return;

        const processingType = processingTypeSelect.value;
        if (!processingType) {
            showStatus(processStatus, 'error', '‚ùå Please select a processing type');
            return;
        }

        processBtn.disabled = true;
        processLoader.classList.add('show');
        processProcessing.style.display = 'block';
        processStatus.classList.remove('show');
        resultBox.style.display = 'none';

        updateStep(3);

        try {
            const response = await fetch(`${API_URL}/process`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    file_id: currentFileId,
                    processing_type: processingType
                })
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.detail || response.statusText);
            }

            const data = await response.json();

            const successMessage = `‚úÖ ${data.message || 'Processing completed!'}
    üìä Records: ${data.records_processed}
    üîë Join Key: ${data.join_key_used}
    üìÅ Collections: ${data.collection_used}`;

            showStatus(processStatus, 'success', successMessage);

            resultBox.style.display = 'block';
            resultBox.innerHTML = `<h2>‚ú® Processing Results</h2><pre>${syntaxHighlight(JSON.stringify(data, null, 2))}</pre>`;

            step3.classList.add('completed');
            step3.classList.remove('active');

            setTimeout(() => {
                resultBox.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
            }, 300);

        } catch (error) {
            showStatus(processStatus, 'error', `‚ùå Processing failed: ${error.message}`);
        } finally {
            processLoader.classList.remove('show');
            processProcessing.style.display = 'none';
            processBtn.disabled = false;
        }
    });

    // Show status message
    function showStatus(element, type, message) {
        element.className = `status show ${type}`;
        element.textContent = message;

        if (type === 'success') {
            setTimeout(() => {
                element.classList.remove('show');
            }, 5000);
        }
    }

    // Syntax highlighting for JSON
    function syntaxHighlight(json) {
        json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
        return json.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g, function (match) {
            if (/^"/.test(match)) {
                if (/:$/.test(match)) {
                    return '<span style="color: #a78bfa; font-weight: 600;">' + match + '</span>';
                } else {
                    return '<span style="color: #86efac;">' + match + '</span>';
                }
            } else if (/true|false/.test(match)) {
                return '<span style="color: #fbbf24;">' + match + '</span>';
            } else if (/null/.test(match)) {
                return '<span style="color: #ef4444;">' + match + '</span>';
            }
            return '<span style="color: #60a5fa;">' + match + '</span>';
        });
    }

    // Keyboard shortcuts
    document.addEventListener('keydown', (e) => {
        if ((e.ctrlKey || e.metaKey) && e.key === 'u') {
            e.preventDefault();
            if (!uploadBtn.disabled && selectedFile) {
                uploadBtn.click();
            }
        }

        if ((e.ctrlKey || e.metaKey) && e.key === 'p') {
            e.preventDefault();
            if (!processBtn.disabled && processingTypeSelect.value) {
                processBtn.click();
            }
        }
    });

    console.log('%cüöÄ Data Processing Platform', 'font-size: 20px; font-weight: bold; color: #667eea;');
    console.log('%cKeyboard Shortcuts:', 'font-size: 14px; font-weight: bold; color: #64748b;');
    console.log('%c  Ctrl/Cmd + U: Upload file', 'font-size: 12px; color: #94a3b8;');
    console.log('%c  Ctrl/Cmd + P: Process data', 'font-size: 12px; color: #94a3b8;');

    loadProcessingTypes();
    document.documentElement.style.scrollBehavior = 'smooth';