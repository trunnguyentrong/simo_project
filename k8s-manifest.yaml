# Kubernetes Deployment Manifest for Data Processing System - SIMPLIFIED FOR TESTING
# This manifest deploys the application services only
# MinIO and MongoDB are existing services and not included here

---
# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: data-processing

---
# ConfigMap for Application Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: data-processing
data:
  APP_HOST: "0.0.0.0"
  APP_PORT: "8001"
  # Update these with your existing MongoDB service endpoints
  MONGODB_URL: "mongodb://admin:password@mongodb-host:27017"
  MONGODB_DB: "data_processing"
  # Update these with your existing MinIO service endpoints
  MINIO_ENDPOINT: "minio-host:9000"
  MINIO_BUCKET: "uploads"
  MINIO_SECURE: "false"

---
# Secret for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: data-processing
type: Opaque
stringData:
  MINIO_ACCESS_KEY: "minioadmin"
  MINIO_SECRET_KEY: "minioadmin"
  POSTGRES_USER: "kong"
  POSTGRES_PASSWORD: "kongpass"
  EXTERNAL_API_KEY: "your-api-key-here"
  EXTERNAL_API_URL: "https://external-api.example.com/data"

---
# PersistentVolumeClaim for PostgreSQL (Kong)
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: data-processing
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard

---
# PostgreSQL Deployment (for Kong)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: data-processing
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:16-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          value: "kong"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: POSTGRES_PASSWORD
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
          subPath: postgres
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - kong
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - kong
          initialDelaySeconds: 10
          periodSeconds: 10
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: data-processing
  labels:
    app: postgres
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgres
  selector:
    app: postgres

---
# Kong Migration Job
apiVersion: batch/v1
kind: Job
metadata:
  name: kong-migration
  namespace: data-processing
  labels:
    app: kong-migration
spec:
  ttlSecondsAfterFinished: 100
  template:
    metadata:
      labels:
        app: kong-migration
    spec:
      restartPolicy: OnFailure
      initContainers:
      - name: wait-for-postgres
        image: postgres:16-alpine
        command:
        - sh
        - -c
        - |
          until pg_isready -h postgres-service -U kong; do
            echo "Waiting for postgres..."
            sleep 2
          done
      containers:
      - name: kong-migration
        image: kong/kong-gateway:3.5
        command: ["kong", "migrations", "bootstrap"]
        env:
        - name: KONG_DATABASE
          value: "postgres"
        - name: KONG_PG_HOST
          value: "postgres-service"
        - name: KONG_PG_DATABASE
          value: "kong"
        - name: KONG_PG_USER
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: POSTGRES_USER
        - name: KONG_PG_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: POSTGRES_PASSWORD

---
# Backend Upload Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-upload
  namespace: data-processing
  labels:
    app: backend-upload
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend-upload
  template:
    metadata:
      labels:
        app: backend-upload
    spec:
      containers:
      - name: backend-upload
        image: your-registry/backend-upload:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8001
          name: http
        envFrom:
        - configMapRef:
            name: app-config
        env:
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: MINIO_ACCESS_KEY
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: MINIO_SECRET_KEY
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"

---
# Backend Upload Service
apiVersion: v1
kind: Service
metadata:
  name: backend-upload-service
  namespace: data-processing
  labels:
    app: backend-upload
spec:
  type: ClusterIP
  ports:
  - port: 8001
    targetPort: 8001
    protocol: TCP
    name: http
  selector:
    app: backend-upload

---
# Backend Process Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-process
  namespace: data-processing
  labels:
    app: backend-process
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend-process
  template:
    metadata:
      labels:
        app: backend-process
    spec:
      containers:
      - name: backend-process
        image: your-registry/backend-process:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8001
          name: http
        envFrom:
        - configMapRef:
            name: app-config
        env:
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: MINIO_ACCESS_KEY
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: MINIO_SECRET_KEY
        - name: EXTERNAL_API_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: EXTERNAL_API_KEY
        - name: EXTERNAL_API_URL
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: EXTERNAL_API_URL
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"

---
# Backend Process Service
apiVersion: v1
kind: Service
metadata:
  name: backend-process-service
  namespace: data-processing
  labels:
    app: backend-process
spec:
  type: ClusterIP
  ports:
  - port: 8001
    targetPort: 8001
    protocol: TCP
    name: http
  selector:
    app: backend-process

---
# Backend Type Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-type
  namespace: data-processing
  labels:
    app: backend-type
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend-type
  template:
    metadata:
      labels:
        app: backend-type
    spec:
      containers:
      - name: backend-type
        image: your-registry/backend-type:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8001
          name: http
        envFrom:
        - configMapRef:
            name: app-config
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"

---
# Backend Type Service
apiVersion: v1
kind: Service
metadata:
  name: backend-type-service
  namespace: data-processing
  labels:
    app: backend-type
spec:
  type: ClusterIP
  ports:
  - port: 8001
    targetPort: 8001
    protocol: TCP
    name: http
  selector:
    app: backend-type

---
# Kong ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: kong-config
  namespace: data-processing
data:
  kong.yaml: |
    _format_version: "3.0"

    services:
      - name: backend-service-upload
        url: http://backend-upload-service:8001
        routes:
          - name: upload-route
            paths:
              - /api/upload
            methods:
              - POST
            strip_path: true
            preserve_host: false
            plugins:
              - name: request-transformer
                config:
                  replace:
                    uri: /upload/

      - name: backend-service-process
        url: http://backend-process-service:8001
        routes:
          - name: process-route
            paths:
              - /api/process
            methods:
              - POST
            strip_path: true
            preserve_host: false
            plugins:
              - name: request-transformer
                config:
                  replace:
                    uri: /process/

      - name: backend-service-type
        url: http://backend-type-service:8001
        routes:
          - name: types-route
            paths:
              - /api/types
            methods:
              - GET
            strip_path: true
            preserve_host: false
            plugins:
              - name: request-transformer
                config:
                  replace:
                    uri: /types/

    plugins:
      - name: cors
        config:
          origins:
            - "*"
          methods:
            - GET
            - POST
            - PUT
            - DELETE
            - OPTIONS
          headers:
            - Accept
            - Accept-Version
            - Content-Length
            - Content-MD5
            - Content-Type
            - Date
            - X-Auth-Token
            - Authorization
          exposed_headers:
            - X-Auth-Token
          credentials: true
          max_age: 3600

      - name: request-size-limiting
        config:
          allowed_payload_size: 100

      - name: prometheus
        config:
          per_consumer: false

---
# Kong Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kong
  namespace: data-processing
  labels:
    app: kong
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kong
  template:
    metadata:
      labels:
        app: kong
    spec:
      initContainers:
      - name: wait-for-migration
        image: busybox:1.36
        command:
        - sh
        - -c
        - |
          echo "Waiting for Kong migration to complete..."
          sleep 30
      containers:
      - name: kong
        image: kong/kong-gateway:3.5
        ports:
        - containerPort: 8000
          name: proxy
        - containerPort: 8443
          name: proxy-ssl
        - containerPort: 8001
          name: admin
        - containerPort: 8444
          name: admin-ssl
        - containerPort: 8002
          name: manager
        env:
        - name: KONG_DATABASE
          value: "postgres"
        - name: KONG_PG_HOST
          value: "postgres-service"
        - name: KONG_PG_DATABASE
          value: "kong"
        - name: KONG_PG_USER
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: POSTGRES_USER
        - name: KONG_PG_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: POSTGRES_PASSWORD
        - name: KONG_PROXY_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PROXY_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_LISTEN
          value: "0.0.0.0:8001, 0.0.0.0:8444 ssl"
        - name: KONG_ADMIN_GUI_URL
          value: "http://localhost:8002"
        livenessProbe:
          httpGet:
            path: /status
            port: 8001
          initialDelaySeconds: 60
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /status
            port: 8001
          initialDelaySeconds: 30
          periodSeconds: 10
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"

---
# Kong Service
apiVersion: v1
kind: Service
metadata:
  name: kong-service
  namespace: data-processing
  labels:
    app: kong
spec:
  type: LoadBalancer
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: proxy
  - port: 8443
    targetPort: 8443
    protocol: TCP
    name: proxy-ssl
  - port: 8001
    targetPort: 8001
    protocol: TCP
    name: admin
  - port: 8444
    targetPort: 8444
    protocol: TCP
    name: admin-ssl
  - port: 8002
    targetPort: 8002
    protocol: TCP
    name: manager
  selector:
    app: kong

---
# Kong Configuration Job (applies kong.yaml)
apiVersion: batch/v1
kind: Job
metadata:
  name: kong-config-apply
  namespace: data-processing
  labels:
    app: kong-config
spec:
  ttlSecondsAfterFinished: 100
  template:
    metadata:
      labels:
        app: kong-config
    spec:
      restartPolicy: OnFailure
      initContainers:
      - name: wait-for-kong
        image: busybox:1.36
        command:
        - sh
        - -c
        - |
          echo "Waiting for Kong to be ready..."
          sleep 60
      containers:
      - name: deck
        image: kong/deck:latest
        command:
        - deck
        - gateway
        - sync
        - /etc/kong/kong.yaml
        - --kong-addr
        - http://kong-service:8001
        - --timeout
        - "120"
        volumeMounts:
        - name: kong-config-volume
          mountPath: /etc/kong
      volumes:
      - name: kong-config-volume
        configMap:
          name: kong-config
